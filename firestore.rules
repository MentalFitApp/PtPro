rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Funzione per validare i dati di pagamento
    function isValidPayment() {
      return request.resource.data.keys().hasAll(['amount', 'duration', 'paymentDate']) &&
             request.resource.data.amount is number &&
             request.resource.data.amount > 0 &&
             request.resource.data.duration is string &&
             request.resource.data.paymentDate is timestamp &&
             (!request.resource.data.keys().hasAny(['paymentMethod']) || request.resource.data.paymentMethod is string);
    }
    
    function isOwner() {
      return request.auth != null &&
             (!exists(/databases/$(database)/documents/roles/admins) || request.auth.uid in get(/databases/$(database)/documents/roles/admins).data.uids);
    }
    
    function isCoach() {
      return isOwner() ||
             (request.auth != null &&
              (!exists(/databases/$(database)/documents/roles/coaches) || request.auth.uid in get(/databases/$(database)/documents/roles/coaches).data.uids));
    }
    
    function isClient(userId) {
      return request.auth != null && request.auth.uid == userId &&
             exists(/databases/$(database)/documents/clients/$(userId)) &&
             get(/databases/$(database)/documents/clients/$(userId)).data.isClient == true;
    }
    
    match /clients/{userId} {
      allow create: if isCoach() || isOwner();
      allow read: if request.auth != null && (request.auth.uid == userId || isCoach() || isOwner());
      allow list: if isCoach() || isOwner();
      allow update: if isCoach() || isOwner() || isClient(userId);
      allow delete: if isOwner();
      
      match /anamnesi/{docId} {
        allow read, write: if isCoach() || isOwner() || isClient(userId);
      }
      
      match /checks/{docId} {
        allow read, write: if isCoach() || isOwner() || isClient(userId);
      }
      
      match /payments/{docId} {
        allow read: if isCoach() || isOwner() || isClient(userId);
        allow create, update: if (isCoach() || isOwner()) && isValidPayment();
        allow delete: if isCoach() || isOwner();
      }
    }
    
    match /{path=**}/payments/{paymentId} {
      allow read: if isCoach() || isOwner();
    }
    
    match /{path=**}/checks/{checkId} {
      allow read: if isCoach() || isOwner();
    }
    
    match /{path=**}/anamnesi/{anamnesiId} {
      allow read: if isCoach() || isOwner();
    }
    
    match /chats/{chatId} {
      allow get: if request.auth != null && (request.auth.uid in resource.data.participants || isCoach() || isOwner());
      allow list: if request.auth != null && (isCoach() || isOwner() || request.auth.uid in resource.data.participants);
      allow create: if request.auth != null &&
                     request.auth.uid in request.resource.data.participants &&
                     request.resource.data.participants.size() == 2;
      allow update: if request.auth != null && (request.auth.uid in resource.data.participants || isCoach() || isOwner());
      allow delete: if isCoach() || isOwner();
      
      match /messages/{messageId} {
        allow read: if request.auth != null &&
                      (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants || isCoach() || isOwner());
        allow create: if request.auth != null &&
                      (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants || isCoach() || isOwner());
        allow update, delete: if isCoach() || isOwner();
      }
    }
    
    match /roles/{docId} {
      allow read: if request.auth != null;
      allow write: if isOwner();
    }
    
    match /app-data/{docId} {
      allow read, write: if isCoach() || isOwner();
    }
  }
}